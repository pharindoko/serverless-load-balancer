service: serverless-load-balancer

plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-central-1
custom:
   file: ${file(./config/serverless.${self:provider.stage}.config.yml)} 
functions:
  handler:
    handler: handler.handler
    events:
      - alb:
          listenerArn: { Ref: HTTPListener }
          priority: 1
          conditions:
            path: /
resources:
   Outputs:
      LoadBalancerDNSName:
         Value: !GetAtt LoadBalancer.DNSName
   Resources:
      SecurityGroup:
         Type: 'AWS::EC2::SecurityGroup'
         Properties:
            GroupName: ${self:service}
            GroupDescription: 'HTTPS/HTTPS inbound; Nothing outbound'
            VpcId: ${self:custom.file.VPC_ID}
            SecurityGroupIngress:
               -
                  IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: 0.0.0.0/0
               -
                  IpProtocol: tcp
                  FromPort: '443'
                  ToPort: '443'
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
               -
                  IpProtocol: -1
                  FromPort: '1'
                  ToPort: '1'
                  CidrIp: 127.0.0.1/32
      LoadBalancer:
         Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
         Properties:
            Type: 'application'
            Name: ${self:service}
            IpAddressType: 'ipv4'
            Scheme: '${self:custom.file.SCHEME}'
            LoadBalancerAttributes:
               - { Key: 'deletion_protection.enabled', Value: false }
               - { Key: 'routing.http2.enabled', Value: false }
               - { Key: 'access_logs.s3.enabled', Value: false }
            SecurityGroups:
               - { Ref: SecurityGroup }
            Subnets:
               - ${self:custom.file.SUBNET_ID_A}
               - ${self:custom.file.SUBNET_ID_B}
               - ${self:custom.file.SUBNET_ID_C}
      HTTPListener:
         Type: 'AWS::ElasticLoadBalancingV2::Listener'
         Properties:
            LoadBalancerArn: { Ref: LoadBalancer }
            Port: 80
            Protocol: 'HTTP'
            DefaultActions:
               -
                  Type: 'fixed-response'
                  Order: 1
                  FixedResponseConfig:
                     StatusCode: 404
                     ContentType: 'application/json'
                     MessageBody: 'not found'
      LoadBalancerParam:
         Type: "AWS::SSM::Parameter"
         Properties:
            Name: "/${self:service}/${self:provider.stage}/LoadBalancerUrl"
            Type: "String"
            Value: !GetAtt LoadBalancer.DNSName
            Description: "loadbalancer url"
